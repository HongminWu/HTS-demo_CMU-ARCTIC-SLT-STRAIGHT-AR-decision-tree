# ----------------------------------------------------------------- #
#           The HMM-Based Speech Synthesis System (HTS)             #
#           developed by HTS Working Group                          #
#           http://hts.sp.nitech.ac.jp/                             #
# ----------------------------------------------------------------- #
#                                                                   #
#  Copyright (c) 2001-2008  Nagoya Institute of Technology          #
#                           Department of Computer Science          #
#                                                                   #
#                2001-2008  Tokyo Institute of Technology           #
#                           Interdisciplinary Graduate School of    #
#                           Science and Engineering                 #
#                                                                   #
# All rights reserved.                                              #
#                                                                   #
# Redistribution and use in source and binary forms, with or        #
# without modification, are permitted provided that the following   #
# conditions are met:                                               #
#                                                                   #
# - Redistributions of source code must retain the above copyright  #
#   notice, this list of conditions and the following disclaimer.   #
# - Redistributions in binary form must reproduce the above         #
#   copyright notice, this list of conditions and the following     #
#   disclaimer in the documentation and/or other materials provided #
#   with the distribution.                                          #
# - Neither the name of the HTS working group nor the names of its  #
#   contributors may be used to endorse or promote products derived #
#   from this software without specific prior written permission.   #
#                                                                   #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND            #
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,       #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF          #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE          #
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS #
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,          #
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED   #
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     #
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON #
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   #
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY    #
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE           #
# POSSIBILITY OF SUCH DAMAGE.                                       #
# ----------------------------------------------------------------- #

# setting
SPEAKER = @SPEAKER@
DATASET = @DATASET@

# awk, perl, bc and tcl
AWK   = @AWK@
PERL  = @PERL@
BC    = @BC@
TCLSH = @TCLSH@
WC    = @WC@

# SPTK commands
SWAB    = @SWAB@
X2X     = @X2X@
FRAME   = @FRAME@
WINDOW  = @WINDOW@
MGCEP   = @MGCEP@
LPC2LSP = @LPC2LSP@
STEP    = @STEP@
MERGE   = @MERGE@
VSTAT   = @VSTAT@
NRAND   = @NRAND@
SOPR    = @SOPR@
VOPR    = @VOPR@
NAN     = @NAN@

# dumpfeats to extract utterance information
DUMPFEATS = @DUMPFEATS@

# speech analysis conditions
BYTESWAP    = @BYTESWAP@     # Little Endian (i*86, x86_64, Alpha, etc.) => 0    Big Endian (PowerPC, SPARC, 680x0, etc.) => 1
SAMPFREQ    = @SAMPFREQ@ # Sampling frequency (16kHz)
FRAMELEN    = @FRAMELEN@   # Frame length in point (400 = 16000 * 0.025) 
FRAMESHIFT  = @FRAMESHIFT@    # Frame shift in point (80 = 16000 * 0.005)
WINDOWTYPE  = @WINDOWTYPE@     # Window type -> 0: Blackman 1: Hamming 2: Hanning
NORMALIZE   = @NORMALIZE@     # Normalization -> 0: none  1: by power  2: by magnitude
FFTLEN      = @FFTLEN@   # FFT length in point
FREQWARP    = @FREQWARP@  # frequency warping factor
GAMMA       = @GAMMA@     # pole/zero weight for mel-generalized cepstral (MGC) analysis
MGCORDER    = @MGCORDER@    # order of MGC analysis
MGCLSP      = @MGCLSP@     # convert MGC coefficients into MGC-LSP form 
LNGAIN      = @LNGAIN@     # use logarithmic gain rather than linear gain
LOWERF0     = @LOWERF0@    # lower limit for f0 extraction (Hz) (get_f0's default is 60 Hz)
UPPERF0     = @UPPERF0@   # upper limit for f0 extraction (Hz) (get_f0's default is 400 Hz)
NOISEMASK   = @NOISEMASK@    # standard deviation of white noise to mask noises in f0 extraction

# windows for calculating delta features
MGCWIN      = win/mgc.win
LF0WIN      = win/lf0.win
NMGCWIN     = @NMGCWIN@
NLF0WIN     = @NLF0WIN@

all: analysis labels

analysis: mgc lf0 cmp gv

labels: label mlf list scp

mgc:
	# Extracting MGC or MGC-LSP coefficients from raw audio
	mkdir -p mgc
	
	for raw in raw/$(DATASET)_$(SPEAKER)_*.raw; do \
		base=`basename $${raw} .raw`; \
		if [ -s $${raw} ]; then \
			if [ $(BYTESWAP) -eq 1 ]; then \
				$(SWAB) +s $${raw} | $(X2X) +sf > tmp;  \
			else \
				$(X2X) +sf $${raw} > tmp; \
			fi; \
			if [ $(MGCLSP) -eq 0 ]; then \
				echo "Extracting MGC coefficients from $${raw}"; \
				if [ $(GAMMA) -ne 0 ]; then \
					GAMMAOPT="-g $(GAMMA)"; \
				fi; \
				$(FRAME) +f -l $(FRAMELEN) -p $(FRAMESHIFT) tmp | \
				$(WINDOW) -l $(FRAMELEN) -L $(FFTLEN) -w $(WINDOWTYPE) -n $(NORMALIZE) | \
				$(MGCEP) -a $(FREQWARP) $${GAMMAOPT} -m $(MGCORDER) -l $(FFTLEN) > mgc/$${base}.mgc; \
			else \
				echo "Extracting MGC-LSP coefficients from $${raw}"; \
				SAMPKHZ=`expr $(SAMPFREQ) / 1000`; \
				if [ $(LNGAIN) -eq 1 ]; then \
					GAINOPT="-l"; \
				fi; \
				$(FRAME) +f -l $(FRAMELEN) -p $(FRAMESHIFT) tmp | \
				$(WINDOW) -l $(FRAMELEN) -L $(FFTLEN) -w $(WINDOWTYPE) -n $(NORMALIZE) | \
				$(MGCEP) -a $(FREQWARP) -g $(GAMMA) -m $(MGCORDER) -l $(FFTLEN) -o 4 | \
				$(LPC2LSP) -m $(MGCORDER) -s $${SAMPKHZ} $${GAINOPT} -n $(FFTLEN) -p 8 -d 1e-6 > mgc/$${base}.mgc; \
			fi; \
			if [ -n "`$(NAN) mgc/$${base}.mgc`" ]; then \
				echo " Failed to extract MGC coefficients from $${raw}"; \
				rm -f mgc/$${base}.mgc; \
			fi; \
		fi; \
	done
	
	rm -f tmp

lf0:
	# Extracting log f0 sequence from raw audio
	mkdir -p lf0
	
	for raw in raw/$(DATASET)_$(SPEAKER)_*.raw; do \
		base=`basename $${raw} .raw`; \
		if [ -s $${raw} ]; then \
			echo "Extracting f0 from $${raw}"; \
			count=`echo "0.005 * $(SAMPFREQ)" | $(BC) -l`; \
			$(STEP) -l `printf "%.0f" $${count}` -v 0.0 | \
			$(X2X) +fs > tmp.head; \
			count=`echo "0.025 * $(SAMPFREQ)" | $(BC) -l`; \
			$(STEP) -l `printf "%.0f" $${count}` -v 0.0 | \
			$(X2X) +fs > tmp.tail; \
			cat tmp.head $${raw} tmp.tail | \
			$(X2X) +sf > tmp; \
			leng=`$(X2X) +fa tmp | $(WC) -l`; \
			$(NRAND) -l $${leng} | $(SOPR) -m $(NOISEMASK) | $(VOPR) -a tmp | \
			$(X2X) +fs > tmp.raw; \
			$(TCLSH) scripts/getf0.tcl -l -lf0 -H $(UPPERF0) -L $(LOWERF0) -p $(FRAMESHIFT) -r $(SAMPFREQ) tmp.raw | \
			$(X2X) +af > lf0/$${base}.lf0; \
			if [ -n "`$(NAN) lf0/$${base}.lf0`" ]; then \
				echo " Failed to extract log f0 from $${raw}"; \
				rm -f lf0/$${base}.lf0; \
			fi; \
		fi; \
	done
	
	rm -f tmp tmp.head tmp.tail tmp.raw

cmp: 
	# Composing training data files from mgc and lf0 files
	mkdir -p cmp

	for j in 1; do \
		MGCDIM=`expr $(MGCORDER) + 1`; \
		LF0DIM=1; \
		MGCWINDIM=`expr $(NMGCWIN) \* $${MGCDIM}`; \
		LF0WINDIM=`expr $(NLF0WIN) \* $${LF0DIM}`; \
		BYTEPERFRAME=`expr 4 \* \( $${MGCWINDIM} + $${LF0WINDIM} \)`; \
		for mgc in mgc/$(DATASET)_$(SPEAKER)_*.mgc; do \
			base=`basename $${mgc} .mgc`; \
			MGCWINS=""; \
			LF0WINS=""; \
			if [ -s $${mgc} -a -s lf0/$${base}.lf0 ]; then \
				i=1; \
				echo "Composing training data for $${base}"; \
				while [ $${i} -le $(NMGCWIN) ]; do \
					eval MGCWINS=\"$${MGCWINS} $(MGCWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${MGCDIM} $${mgc} $${MGCWINS} > cmp/tmp.mgc; \
				i=1; \
				while [ $${i} -le $(NLF0WIN) ]; do \
					eval LF0WINS=\"$${LF0WINS} $(LF0WIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${LF0DIM} lf0/$${base}.lf0 $${LF0WINS} > cmp/tmp.lf0; \
				$(MERGE) +f -s 0 -l $${LF0WINDIM} -L $${MGCWINDIM} cmp/tmp.mgc < cmp/tmp.lf0 > cmp/tmp.cmp; \
				$(PERL) scripts/addhtkheader.pl $(SAMPFREQ) $(FRAMESHIFT) $${BYTEPERFRAME} 9 cmp/tmp.cmp > cmp/$${base}.cmp; \
			fi; \
		done; \
	done
	rm -f cmp/tmp*

gv:
	mkdir -p gv
	rm -f gvdata_mgc gvdata_lf0

	# generating GV data
	for raw in raw/$(DATASET)_$(SPEAKER)_*.raw; do \
		base=`basename $${raw} .raw`; \
		if [ -s mgc/$${base}.mgc ]; then \
			$(VSTAT) -n $(MGCORDER) -o 2 -d mgc/$${base}.mgc >> gvdata_mgc; \
		fi; \
		if [ -s lf0/$${base}.lf0 ]; then \
			$(X2X) +fa lf0/$${base}.lf0 | grep -v '\-1e+10' | $(X2X) +af | $(VSTAT) -l 1 -o 2 -d >> gvdata_lf0; \
		fi; \
	done
	
	# calculating GV pdfs
	$(VSTAT) -n $(MGCORDER) -o 0 -d gvdata_mgc > gv/gv-mgc.pdf
	$(VSTAT) -l 1 -o 0 -d gvdata_lf0 > gv/gv-lf0.pdf

	# GV pdfs in big endian (for hts_engine)
	# Add header (dimensionality and # of distributions)
	if [ $(BYTESWAP) -eq 1 ]; then \
		MGCDIM=`expr $(MGCORDER) + 1`; \
		LF0DIM=1; \
		echo $${MGCDIM} | $(X2X) +ai >  gv/gv-mgc.pdf.big; \
		echo "1"        | $(X2X) +ai >> gv/gv-mgc.pdf.big; \
		cat  gv/gv-mgc.pdf           >> gv/gv-mgc.pdf.big; \
		echo $${LF0DIM} | $(X2X) +ai >  gv/gv-lf0.pdf.big; \
		echo "1"        | $(X2X) +ai >> gv/gv-lf0.pdf.big; \
		cat  gv/gv-lf0.pdf           >> gv/gv-lf0.pdf.big; \
	else \
		MGCDIM=`expr $(MGCORDER) + 1`; \
		LF0DIM=1; \
		echo $${MGCDIM} | $(X2X) +ai | $(SWAB) +f >  gv/gv-mgc.pdf.big; \
		echo "1"        | $(X2X) +ai | $(SWAB) +f >> gv/gv-mgc.pdf.big; \
		$(SWAB) +f gv/gv-mgc.pdf                  >> gv/gv-mgc.pdf.big; \
		echo $${LF0DIM} | $(X2X) +ai | $(SWAB) +f >  gv/gv-lf0.pdf.big; \
		echo "1"        | $(X2X) +ai | $(SWAB) +f >> gv/gv-lf0.pdf.big; \
		$(SWAB) +f gv/gv-lf0.pdf                  >> gv/gv-lf0.pdf.big; \
	fi; \
	rm -f gvdata_mgc gvdata_lf0

label:
	mkdir -p labels/mono
	mkdir -p labels/full

	# Extracting monophone and fullcontext labels from utterance files
	for utt in utts/$(DATASET)_$(SPEAKER)_*.utt; do \
		base=`basename $${utt} .utt`; \
		if [ -s $${utt} ]; then \
			$(DUMPFEATS)    -eval     scripts/extra_feats.scm \
					-relation Segment \
					-feats    scripts/label.feats \
					-output   tmp \
					$${utt}; \
		fi; \
		$(AWK) -f scripts/label-full.awk tmp > labels/full/$${base}.lab; \
		$(AWK) -f scripts/label-mono.awk tmp > labels/mono/$${base}.lab; \
	done
	rm -f tmp

mlf:
	# Generating monophone and fullcontext Master Label Files (MLF)
	echo "#!MLF!#" > labels/mono.mlf
	echo "\"*/$(DATASET)_$(SPEAKER)_*.lab\" -> \"@PWD@/data/labels/mono\"" >> labels/mono.mlf

	echo "#!MLF!#" > labels/full.mlf
	echo "\"*/$(DATASET)_$(SPEAKER)_*.lab\" -> \"@PWD@/data/labels/full\"" >> labels/full.mlf

list:
	mkdir -p lists

	# Generating a fullcntext model list occurred in the training data
	rm -f tmp
	for lab in labels/full/$(DATASET)_$(SPEAKER)_*.lab; do \
		if [ -s $${lab} -a -s labels/mono/`basename $${lab}` -a -s cmp/`basename $${lab} .lab`.cmp ]; then \
			sed -e "s/.* //g" $${lab} >> tmp; \
		fi \
	done
	sort -u tmp > lists/full.list
	rm -f tmp

	# Generating a fullcontext model list including unseen models 
	rm -f tmp
	cat lists/full.list > tmp
	for lab in labels/gen/*.lab; do \
		sed -e "s/.* //g" $${lab} >> tmp; \
	done
	sort -u tmp > lists/full_all.list
	rm -f tmp

	# Generating a monophone list 
	rm -f tmp
	for lab in labels/mono/$(DATASET)_$(SPEAKER)_*.lab; do \
		if [ -s $${lab} -a -s labels/full/`basename $${lab}` -a -s cmp/`basename $${lab} .lab`.cmp ]; then \
			sed -e "s/.* //g" $${lab} >> tmp; \
		fi \
	done
	sort -u tmp > lists/mono.list
	rm -f tmp

scp:
	mkdir -p scp
	
	# Generating a trainig data script
	rm -f scp/train.scp
	for cmp in @PWD@/data/cmp/$(DATASET)_$(SPEAKER)_*.cmp; do \
		if [ -s $${cmp} -a -s labels/mono/`basename $${cmp} .cmp`.lab -a -s labels/full/`basename $${cmp} .cmp`.lab ]; then \
			echo $${cmp} >> scp/train.scp; \
		fi \
	done

	# Generating a generation label script
	rm -f scp/gen.scp
	for lab in @PWD@/data/labels/gen/*.lab; do \
		echo $${lab} >> scp/gen.scp; \
	done


clean: clean-mgc clean-lf0 clean-cmp clean-gv clean-label clean-mlf clean-list clean-scp

clean-mgc:
	rm -rf mgc

clean-lf0:
	rm -rf lf0

clean-cmp:
	rm -rf cmp

clean-gv:
	rm -rf gv

clean-label:
	rm -rf labels/mono
	rm -rf labels/full

clean-mlf:
	rm -f labels/*.mlf
	
clean-list:
	rm -rf lists

clean-scp:
	rm -rf scp

distclean: clean
	rm -f Makefile

.PHONY: all analysis labels mgc lf0 cmp gv label mlf list scp clean 
